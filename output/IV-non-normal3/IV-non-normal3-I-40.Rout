
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## path <- "P:/Cluster/LVMproject/article-smallSampleInference"
> ## setwd(path)
> ## source("BATCH_IV-non-normal3.R")
> 
> rm(list = ls())
> gc()
          used (Mb) gc trigger  (Mb) max used (Mb)
Ncells 1323944 70.8    2678515 143.1  1689247 90.3
Vcells 2267572 17.4    8388608  64.0  5122796 39.1
> 
> ## * seed
> iter_sim <- as.numeric(Sys.getenv("SGE_TASK_ID"))
> n.iter_sim <- as.numeric(Sys.getenv("SGE_TASK_LAST"))
> if(is.na(iter_sim)){iter_sim <- 2}
> if(is.na(n.iter_sim)){n.iter_sim <- 10}
> cat("iteration ",iter_sim," over ",n.iter_sim,"\n",sep="")
iteration 40 over 40
> 
> set.seed(1)
> seqSeed <- sample(1:max(1e5,n.iter_sim),size=n.iter_sim,replace=FALSE)
> iSeed <- seqSeed[iter_sim]
> set.seed(iSeed)
> 
> cat("seed: ",iSeed,"\n")
seed:  41112 
> 
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","IV-non-normal3")
> if(dir.exists(path.res)==FALSE){
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","IV-non-normal3")
> if(dir.exists(path.output)==FALSE){
+     dir.create(path.output)
+ }
> 
> ## * libraries
> library(lava)
> library(data.table)
> library(multcomp)
Loading required package: mvtnorm
Loading required package: survival
Loading required package: TH.data
Loading required package: MASS

Attaching package: ‘TH.data’

The following object is masked from ‘package:MASS’:

    geyser

> library(MIIVsem)
This is MIIVsem 0.5.3
MIIVsem is BETA software! Please report any bugs.
> library(lavaSearch2) ##
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:lava’:

    vars

lavaSearch2 version 1.5.3
> 
> ## * settings
> seqN <- c(20,30,50,100,300,500,1000)
> n.boot <- 0
> n.rep <- 5e2
> 
> ## * model
> 
> ## ** generative model
> m.generative <- lvm(c(Y1.aa~eta.aa,
+                       Y2.aa~eta.aa,
+                       Y3.aa~eta.aa,
+                       Y4.aa~1,
+                       eta.aa~Age+2*eta.id,
+                       Y1.bb~eta.bb,
+                       Y2.bb~eta.bb,
+                       Y3.bb~eta.bb,
+                       Y4.bb~1,
+                       eta.bb~Age+2*eta.id,
+                       Y1.cc~eta.cc,
+                       Y2.cc~eta.cc,
+                       Y3.cc~eta.cc,
+                       Y4.cc~1,
+                       eta.cc~Age+2*eta.id,
+                       Y1.dd~eta.dd,
+                       Y2.dd~eta.dd,
+                       Y3.dd~eta.dd,
+                       Y4.dd~1,
+                       eta.dd~Age+2*eta.id,
+                       Y1.ee~eta.ee,
+                       Y2.ee~eta.ee,
+                       Y3.ee~eta.ee,
+                       Y4.ee~1,
+                       eta.ee~Age+2*eta.id))
> latent(m.generative) <- ~eta.aa + eta.bb + eta.cc + eta.dd + eta.ee + eta.id
> categorical(m.generative, labels = c("N","Y")) <- ~Gene1
> categorical(m.generative, labels = c("N","Y")) <- ~Gene2
> transform(m.generative, Gene1num~Gene1) <- function(x){as.numeric(x[,1])-1}
> transform(m.generative, Gene2num~Gene2) <- function(x){as.numeric(x[,1])-1}
> transform(m.generative, id~eta.id) <- function(x){paste0("Id",1:NROW(x))}
> 
> sim2 <- function(n){
+     dW <- as.data.table(sim(m.generative, n = n, latent = FALSE))
+     dL <- melt(dW,
+                measure=patterns("^Y1", "^Y2","^Y3","^Y4"),
+                id.vars = c("Age","Gene1","Gene2","Gene1num","Gene2num","id"),
+                value.name = c("Y1","Y2","Y3","Y4")
+                )
+     return(dL)
+ }
> ## ggplot(sim2(100), aes(x=id, y = Y1)) + geom_boxplot()
> 
> ## ** fit model
> m.fit <- lvm(c(Y1~eta,
+                Y2~eta+Gene1,
+                Y3~eta,
+                Y4~eta,
+                eta~Age+Gene2))
> latent(m.fit) <- ~eta
> ## ee <- lava::estimate(m.fit, sim2(n = 1e3))
> ## butils::qqplot2(ee)
> ## hist(lava::sim(m.generative, n = 1e3)$Y1)
> 
> m.fit2 <- '
+     eta =~ Y1 + Y2 + Y3 + Y4  
+     eta ~ Age + Gene2num
+     Y2 ~ Gene1num
+   '
> 
> 
> ## * simulation
> dt.res <- NULL
> df.null <- rbind(data.frame(lava.name = "eta", lavaan.name = "eta~1", type = "alpha", null = 0, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y2", lavaan.name = "Y2~1", type = "nu", null = 0, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y3", lavaan.name = "Y3~1", type = "nu", null = 0, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y4", lavaan.name = "Y4~1", type = "nu", null = 0, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "eta~Age", lavaan.name = "eta~Age", type = "Gamma", null = 1, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "eta~Gene2Y", lavaan.name = "eta~Gene2num", type = "Gamma", null = 0, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y2~eta", lavaan.name = "Y2~eta", type = "Lambda", null = 1, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y2~Gene1Y", lavaan.name = "Y2~Gene1num", type = "K", null = 0, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y3~eta", lavaan.name = "Y3~eta", type = "Lambda", null = 1, stringsAsFactors = FALSE),
+                  data.frame(lava.name = "Y4~eta", lavaan.name = "Y4~eta", type = "Lambda", null = 0, stringsAsFactors = FALSE)
+                  )
> 
> for(iN in 1:length(seqN)){ ## iN <- 1
+     
+     cat("sample size: ",seqN[iN],"\n",sep = "")
+     
+     for(iRep in 1:n.rep){
+         cat("*")
+         ## simulation
+         iD <- sim2(n = seqN[iN])
+ 
+         ## model fit
+         e.ML <- estimate(m.fit, data = iD, estimator = "Gaussian")
+         if(e.ML$opt$convergence>0){
+             e.ML <- estimate(m.fit, data = iD, estimator = "Gaussian", control = list(constrain = TRUE))
+         }
+         e.IV <- estimate(m.fit, data = iD, estimator = "IV")
+         e.IVlavaan <- miive(model = m.fit2, data = iD)
+         ## coef(e.IV)[c("Y2","eta~Gene2Y","Y2~Gene1Y","Y4~eta")]
+         ## coef(e.IVlavaan)[c("Y2~1","eta~Gene2num","Y2~Gene1num","Y4~eta")]
+         ## diag(e.IVlavaan$coefCov)[c("Y2~1","eta~Gene2num","Y2~Gene1num","Y4~eta")]
+         ## diag(vcov(e.IV))[c("Y2","eta~Gene2Y","Y2~Gene1Y","Y4~eta")]
+ 
+         ## diagnostics
+         p.testNorm <- max(apply(residuals(e.ML),2,function(x){shapiro.test(x)$p.value}))
+ 
+         ## ML estimates
+         eS.ML <- summary(e.ML)$coef[df.null$lava.name,]
+         eS.ML[,"Z-value"] <- (eS.ML[,"Estimate"]-df.null$null)/eS.ML[,"Std. Error"]
+         eS.ML[,"P-value"] <- 2*(1-pnorm(abs(eS.ML[,"Z-value"])))
+         
+         ## ML robust estimates
+         eS.robustML <- cbind(estimate(e.ML, id = iD$id)$coefmat, "Z-value" = NA)[df.null$lava.name,]
+         eS.robustML[,"Z-value"] <- (eS.robustML[,"Estimate"]-df.null$null)/eS.robustML[,"Std.Err"]
+         eS.robustML[,"P-value"] <- 2*(1-pnorm(abs(eS.robustML[,"Z-value"])))
+ 
+         ## corrected ML robust estimates
+         if(seqN[iN]<200){
+             eS.robustMLC <- summary2(e.ML, cluster = iD$id, robust = TRUE)$coef[df.null$lava.name,]
+             eS.robustMLC[,"t-value"] <- (eS.robustMLC[,"Estimate"]-df.null$null)/eS.robustMLC[,"robust SE"]
+             eS.robustMLC[,"P-value"] <- 2*(1-pt(abs(eS.robustMLC[,"t-value"]), df = eS.robustMLC[,"df"]))
+         }else{
+             eS.robustMLC <- eS.robustML
+             eS.robustMLC[] <- NA
+         }
+         
+         ## corrected ML robust estimates 2
+         if(seqN[iN]<200){
+             eS.robustMLC2 <- summary2(e.ML, cluster = iD$id, robust = TRUE, df = 3)$coef[df.null$lava.name,]
+             eS.robustMLC2[,"t-value"] <- (eS.robustMLC2[,"Estimate"]-df.null$null)/eS.robustMLC2[,"robust SE"]
+             eS.robustMLC2[,"P-value"] <- 2*(1-pt(abs(eS.robustMLC2[,"t-value"]), df = eS.robustMLC2[,"df"]))
+         }else{
+             eS.robustMLC2 <- eS.robustML
+             eS.robustMLC2[] <- NA
+         }
+ 
+         ## IV estimates
+         eS.IV <- summary(e.IV)$coef[df.null$lava.name,]
+         eS.IV[,"Z-value"] <- (eS.IV[,"Estimate"]-df.null$null)/eS.IV[,"Std. Error"]
+         eS.IV[,"P-value"] <- 2*(1-pnorm(abs(eS.IV[,"Z-value"])))
+         
+         eS.IVlavaan <- cbind("Estimate" = coef(e.IVlavaan)[df.null$lavaan.name],
+                              "Std. Error" = sqrt(diag(e.IVlavaan$coefCov))[df.null$lavaan.name],
+                              "Z-value" = NA,
+                              "P-value" = NA)
+         eS.IVlavaan[,"Z-value"] <- (eS.IVlavaan[,"Estimate"]-df.null$null)/eS.IVlavaan[,"Std. Error"]
+         eS.IVlavaan[,"P-value"] <- 2*(1-pnorm(abs(eS.IVlavaan[,"Z-value"])))
+         
+ 
+         
+         ## if(p.testNorm>0.05){browser()}
+         ## qqtest::qqtest(residuals(e.ML)[,4])
+         iDT.ML <- data.table(seed = iSeed,
+                              n = seqN[iN],
+                              rep = iRep,
+                              link = df.null$lava.name,
+                              type = df.null$type,
+                              estimate = eS.ML[,"Estimate"],
+                              p.value = eS.ML[,"P-value"],
+                              estimator = "ML")
+         iDT.robustML <- data.table(seed = iSeed,
+                                    n = seqN[iN],
+                                    rep = iRep,
+                                    link = df.null$lava.name,
+                                    type = df.null$type,
+                                    estimate = eS.robustML[,"Estimate"],
+                                    p.value = eS.robustML[,"P-value"],
+                                    estimator = "robustML")
+         iDT.robustMLC <- data.table(seed = iSeed,
+                                     n = seqN[iN],
+                                     rep = iRep,
+                                     link = df.null$lava.name,
+                                     type = df.null$type,
+                                     estimate = eS.robustMLC[,"Estimate"],
+                                     p.value = eS.robustMLC[,"P-value"],
+                                     estimator = "robustMLC")
+         iDT.robustMLC2 <- data.table(seed = iSeed,
+                                     n = seqN[iN],
+                                     rep = iRep,
+                                     link = df.null$lava.name,
+                                     type = df.null$type,
+                                     estimate = eS.robustMLC2[,"Estimate"],
+                                     p.value = eS.robustMLC2[,"P-value"],
+                                     estimator = "robustMLC2")
+         iDT.IV <- data.table(seed = iSeed,
+                              n = seqN[iN],
+                              rep = iRep,
+                              link = df.null$lava.name,
+                              type = df.null$type,
+                              estimate = eS.IV[,"Estimate"],
+                              p.value = eS.IV[,"P-value"],
+                              estimator = "IV")
+         iDT.IVlavaan <- data.table(seed = iSeed,
+                                    n = seqN[iN],
+                                    rep = iRep,
+                                    link = df.null$lava.name,
+                                    type = df.null$type,
+                                    estimate = eS.IVlavaan[,"Estimate"],
+                                    p.value = eS.IVlavaan[,"P-value"],
+                                    estimator = "IVlavaan")
+         iDT <- rbind(iDT.ML,
+                      iDT.robustML,
+                      iDT.robustMLC,
+                      iDT.robustMLC2,
+                      iDT.IV,
+                      iDT.IVlavaan)
+ 
+         dt.res <- rbind(dt.res,
+                         cbind(iDT,
+                               shapiroMax = p.testNorm,
+                               cvML = e.ML$opt$convergence)
+                         )
+     }
+ 
+     filename <- paste0("type1error-S",iter_sim,"(tempo).rds")
+     saveRDS(dt.res, file = file.path(path.res,filename))
+ 
+ }
sample size: 20
sample size: 30
sample size: 50
sample size: 100
sample size: 300
sample size: 500
sample size: 1000
filename <- paste0("type1error-S",iter_sim,".rds")
> saveRDS(dt.res, file = file.path(path.res,filename))
> 
> ## * display
> print(sessionInfo())
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: openSUSE 13.1 (Bottle) (x86_64)

Matrix products: default
BLAS: /usr/local/R-3.5.2/lib/libRblas.so
LAPACK: /usr/local/R-3.5.2/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] lavaSearch2_1.5.3 ggplot2_3.1.0     MIIVsem_0.5.3     multcomp_1.4-8   
 [5] TH.data_1.0-8     MASS_7.3-50       survival_2.42-6   mvtnorm_1.0-9    
 [9] data.table_1.12.0 lava_1.6.5       

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0        pillar_1.3.1      compiler_3.5.2    plyr_1.8.4       
 [5] bindr_0.1.1       mets_1.2.3.1      tools_3.5.2       tibble_2.0.1     
 [9] gtable_0.2.0      lattice_0.20-38   pkgconfig_2.0.2   rlang_0.3.1      
[13] Matrix_1.2-14     parallel_3.5.2    pbivnorm_0.6.0    bindrcpp_0.2.2   
[17] stringr_1.3.1     withr_2.1.2       dplyr_0.7.5       stats4_3.5.2     
[21] grid_3.5.2        tidyselect_0.2.4  glue_1.2.0        R6_2.3.0         
[25] timereg_1.9.2     lavaan_0.6-3      reshape2_1.4.3    purrr_0.2.5      
[29] magrittr_1.5      scales_1.0.0      codetools_0.2-15  splines_3.5.2    
[33] mnormt_1.5-5      assertthat_0.2.0  colorspace_1.4-0  numDeriv_2016.8-1
[37] sandwich_2.5-0    stringi_1.2.2     lazyeval_0.2.1    munsell_0.5.0    
[41] crayon_1.3.4      zoo_1.8-4        
> 
> 
> 
> proc.time()
     user    system   elapsed 
16657.108   148.556  9295.070 
