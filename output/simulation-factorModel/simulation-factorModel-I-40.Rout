
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## path <- "P:/Cluster/LVMproject/article-smallSampleInference"
> ## setwd(path)
> ## source("BATCH_simulation-factorModel.R")
> 
> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 257945 13.8     627928 33.6   421289 22.5
Vcells 441838  3.4    8388608 64.0  1752525 13.4
> 
> ## * seed
> iter_sim <- as.numeric(Sys.getenv("SGE_TASK_ID"))
> n.iter_sim <- as.numeric(Sys.getenv("SGE_TASK_LAST"))
> if(is.na(iter_sim)){iter_sim <- 2}
> if(is.na(n.iter_sim)){n.iter_sim <- 10}
> cat("iteration ",iter_sim," over ",n.iter_sim,"\n",sep="")
iteration 40 over 40
> 
> set.seed(1)
> seqSeed <- sample(1:max(1e5,n.iter_sim),size=n.iter_sim,replace=FALSE)
> iSeed <- seqSeed[iter_sim]
> set.seed(iSeed)
> 
> cat("seed: ",iSeed,"\n")
seed:  41112 
> 
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","simulation-factorModel")
> if(dir.exists(path.res)==FALSE){
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","simulation-factorModel")
> if(dir.exists(path.output)==FALSE){
+     dir.create(path.output)
+ }
> 
> ## * libraries
> library(lava)
> library(data.table)
> library(lavaSearch2)
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:lava’:

    vars

lavaSearch2 version 1.5.3
> ## devtools::load_all("lavaSearch2")
> 
> ## * settings
> seqN <- c(20,30,50,75,100,150,200,300,500)
> n.boot <- 0
> n.rep <- 5e2
> 
> ## * model
> 
> ## ** generative model
> m.generative <- lvm(c(Y1~eta,
+                       Y2~eta,
+                       Y3~eta,
+                       Y4~1,
+                       eta~Age))
> latent(m.generative) <- ~eta
> categorical(m.generative, labels = c("N","Y")) <- ~Gene1
> categorical(m.generative, labels = c("N","Y")) <- ~Gene2
> 
> # plot(m.generative)
> 
> ## ** fit model
> m.fit <- lvm(c(Y1~eta+Gene2,
+                Y2~eta,
+                Y3~eta,
+                Y4~eta,
+                eta~Age+Gene1))
> latent(m.fit) <- ~eta
> ## lava::estimate(m.fit, lava::sim(m.generative, n = 1e5))
> 
> ## ** true value of the coefficients
> if(FALSE){ ## create true.coef
+     true.coef <- round(coef(lava::estimate(m.fit, lava::sim(m.generative, n = 1e3))))
+     Mtrue.coef <- cbind(names(true.coef)," = ",as.double(true.coef),",")
+     Mtrue.coef[1,1] <- paste0("c(",Mtrue.coef[1,1])
+     Mtrue.coef[NROW(Mtrue.coef),4] <- ")"
+     Mtrue.coef <- cbind(apply(Mtrue.coef, 1, paste, collapse = ""))
+     print(as.data.table(Mtrue.coef), quote = FALSE, row.names = FALSE)
+ }
> 
> true.coef <- c(eta = 0,
+                Y2 = 0,
+                Y3 = 0,
+                Y4 = 0,
+                "Y1~Gene2Y" = 0,
+                "eta~Age" = 1,
+                "eta~Gene1Y" = 0,
+                "Y2~eta" = 1,
+                "Y3~eta" = 1,
+                "Y4~eta" = 0,
+                "Y1~~Y1" = 1,
+                "eta~~eta" = 1,
+                "Y2~~Y2" = 1,
+                "Y3~~Y3" = 1,
+                "Y4~~Y4" = 1)
> 
> ## * simulation
> out <- calibrateType1(m.fit, true.coef = true.coef,
+                       param = names(true.coef),
+                       null = true.coef,
+                       n = seqN, n.rep = n.rep, 
+                       generative.object = m.generative,
+                       dir.save = path.res, label.file = iter_sim,
+                       bootstrap = FALSE, seed = NULL, trace = 2)
  Check true coefficients - done 
  Settings: 
  > simulation for n=20 30 50 75 100 150 200 300 500
  > model: 
Latent Variable Model
                                    
  Y1 ~ eta+Gene2    gaussian        
  eta ~ Age+Gene1   gaussian, latent
  Y2 ~ eta          gaussian        
  Y3 ~ eta          gaussian        
  Y4 ~ eta          gaussian        

Exogenous variables:                       
  Gene2        gaussian
  Age          gaussian
  Gene1        gaussian

  > expected coefficients: 
       eta         Y2         Y3         Y4  Y1~Gene2Y    eta~Age eta~Gene1Y 
         0          0          0          0          0          1          0 
    Y2~eta     Y3~eta     Y4~eta     Y1~~Y1   eta~~eta     Y2~~Y2     Y3~~Y3 
         1          1          0          1          1          1          1 
    Y4~~Y4 
         1 
  > null hypotheses: 
       eta         Y2         Y3         Y4  Y1~Gene2Y    eta~Age eta~Gene1Y 
         0          0          0          0          0          1          0 
    Y2~eta     Y3~eta     Y4~eta     Y1~~Y1   eta~~eta     Y2~~Y2     Y3~~Y3 
         1          1          0          1          1          1          1 
    Y4~~Y4 
         1 

 Perform simulation: 
  > export results in  ./Results/simulation-factorModel 
Loading required namespace: pbapply
  > sample size=20
  > sample size=30
  > sample size=50
  > sample size=75
  > sample size=100
  > sample size=150
  > sample size=200
  > sample size=300
  > sample size=500
> 
> ## * display
> print(sessionInfo())
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: openSUSE 13.1 (Bottle) (x86_64)

Matrix products: default
BLAS: /usr/local/R-3.5.2/lib/libRblas.so
LAPACK: /usr/local/R-3.5.2/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] lavaSearch2_1.5.3 ggplot2_3.1.0     data.table_1.12.0 lava_1.6.5       

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0       pillar_1.3.1     compiler_3.5.2   plyr_1.8.4      
 [5] bindr_0.1.1      tools_3.5.2      tibble_2.0.1     gtable_0.2.0    
 [9] lattice_0.20-38  pkgconfig_2.0.2  rlang_0.3.1      Matrix_1.2-14   
[13] parallel_3.5.2   mvtnorm_1.0-10   bindrcpp_0.2.2   stringr_1.3.1   
[17] withr_2.1.2      dplyr_0.7.5      grid_3.5.2       tidyselect_0.2.4
[21] glue_1.2.0       R6_2.3.0         pbapply_1.3-4    survival_2.42-6 
[25] multcomp_1.4-10  TH.data_1.0-10   purrr_0.2.5      reshape2_1.4.3  
[29] magrittr_1.5     scales_1.0.0     codetools_0.2-15 splines_3.5.2   
[33] MASS_7.3-50      assertthat_0.2.0 colorspace_1.4-0 sandwich_2.5-0  
[37] stringi_1.2.2    lazyeval_0.2.1   munsell_0.5.0    crayon_1.3.4    
[41] zoo_1.8-4       
> 
> ## * running time
> if(FALSE){
+ 
+     ls.data <- lapply(seqN, function(iN){lava::sim(m.generative, n = iN, latent = FALSE)})
+     names(ls.data) <- seqN
+     ls.lvmfit <- lapply(ls.data, function(iData){lava::estimate(m.fit, data = iData)})
+     names(ls.lvmfit) <- seqN
+ 
+     ## algo 2
+     speedFactor <- microbenchmark::microbenchmark("20" = sCorrect(ls.lvmfit[["20"]]),
+                                                   "30" = sCorrect(ls.lvmfit[["30"]]),
+                                                   "50" = sCorrect(ls.lvmfit[["50"]]),
+                                                   "75" = sCorrect(ls.lvmfit[["75"]]),
+                                                   "100" = sCorrect(ls.lvmfit[["100"]]),
+                                                   "150" = sCorrect(ls.lvmfit[["150"]]),
+                                                   "200" = sCorrect(ls.lvmfit[["200"]]),
+                                                   "300" = sCorrect(ls.lvmfit[["300"]]),
+                                                   "500" = sCorrect(ls.lvmfit[["500"]]),
+                                                   times = 50
+                                                   )
+     saveRDS(speedFactor, file = file.path("Results","speed-Algo2-Factor.rds"))
+  ##    Unit: milliseconds
+  ## expr      min       lq     mean   median       uq      max neval cld
+  ##   20 153.4920 165.4882 167.9470 168.0757 173.8985 181.4775    50 b
+  ##   30 139.3625 143.3120 153.0009 154.8625 156.3171 176.4130    50 a
+  ##   50 140.7812 143.2224 155.0999 155.5626 157.3227 193.3208    50 a
+  ##   75 154.9952 170.4748 174.3150 174.5028 180.2789 210.7192    50 b
+  ##  100 170.1527 183.2981 192.2278 186.0499 195.3349 389.3620    50 c
+  ##  150 175.7185 189.7478 195.4327 194.0275 202.5155 223.1499    50 c
+  ##  200 202.3027 215.0806 220.8639 220.7766 225.8146 252.8478    50 d
+  ##  300 262.3011 266.8939 272.6470 271.2441 275.5871 292.8013    50 e
+  ##  500 360.1440 371.8377 384.6029 380.2178 390.5027 556.9517    50 f
+ 
+ 
+     ## algo 1
+     microbenchmark::microbenchmark("20" = sCorrect(ls.lvmfit[["20"]], adjust.n = FALSE),
+                                    "30" = sCorrect(ls.lvmfit[["30"]], adjust.n = FALSE),
+                                    "50" = sCorrect(ls.lvmfit[["50"]], adjust.n = FALSE),
+                                    "75" = sCorrect(ls.lvmfit[["75"]], adjust.n = FALSE),
+                                    "100" = sCorrect(ls.lvmfit[["100"]], adjust.n = FALSE),
+                                    "150" = sCorrect(ls.lvmfit[["150"]], adjust.n = FALSE),
+                                    "200" = sCorrect(ls.lvmfit[["200"]], adjust.n = FALSE),
+                                    "300" = sCorrect(ls.lvmfit[["300"]], adjust.n = FALSE),
+                                    "500" = sCorrect(ls.lvmfit[["500"]], adjust.n = FALSE),
+                                    times = 50
+                                    )
+ 
+  ##    Unit: milliseconds
+  ## expr      min       lq     mean   median       uq      max neval cld
+  ##   20 137.4206 139.4769 151.5129 151.5326 159.3462 179.8258    50 cd
+  ##   30 124.6302 125.9618 136.9098 138.2271 144.7811 164.9541    50 ab
+  ##   50 120.9232 122.0929 131.6263 132.6343 135.1917 166.9360    50 a
+  ##   75 126.1521 127.8582 139.4041 140.5283 146.9436 166.2210    50 ab
+  ##  100 131.2951 141.6610 145.3657 145.1715 153.7632 157.3701    50 bd
+  ##  150 131.5896 132.9748 142.7944 145.3925 146.9813 159.4823    50 bc
+  ##  200 141.1600 151.5561 154.4614 154.8508 157.2333 171.8212    50 d
+  ##  300 159.7682 170.4607 179.4216 175.0345 183.6101 356.9537    50 e
+  ##  500 207.7388 221.7226 229.4150 223.6882 229.9727 410.6021    50 f
+ 
+ 
+ }
> 
> proc.time()
     user    system   elapsed 
 9494.435   176.303 16284.077 
