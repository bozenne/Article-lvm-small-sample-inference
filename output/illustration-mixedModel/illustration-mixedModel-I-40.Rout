
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## path <- "P:/Cluster/LVMproject/article-smallSampleInference"
> ## setwd(path)
> ## source("BATCH_illustration-mixedModel.R")
> 
> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 259942 13.9     637900 34.1   429685 23.0
Vcells 445804  3.5    8388608 64.0  1889736 14.5
> 
> ## * seed
> iter_sim <- as.numeric(Sys.getenv("SGE_TASK_ID"))
> n.iter_sim <- as.numeric(Sys.getenv("SGE_TASK_LAST"))
> if(is.na(iter_sim)){iter_sim <- 2}
> if(is.na(n.iter_sim)){n.iter_sim <- 180}
> cat("iteration ",iter_sim," over ",n.iter_sim,"\n",sep="")
iteration 40 over 40
> 
> set.seed(2)
> seqSeed <- sample(1:max(1e5,n.iter_sim),size=n.iter_sim,replace=FALSE)
> iSeed <- seqSeed[iter_sim]
> set.seed(iSeed)
> 
> cat("seed: ",iSeed,"\n")
seed:  15042 
> 
> ## * path
> path <- "."
> path.res <- file.path(path,"Results","illustration-mixedModel")
> if(dir.exists(path.res)==FALSE){
+     dir.create(path.res)
+ }
> path.output <- file.path(path,"output","illustration-mixedModel")
> if(dir.exists(path.output)==FALSE){
+     dir.create(path.output)
+ }
> 
> ## * libraries
> library(lava)
> library(data.table)
> ## devtools::load_all("lavaSearch2")
> library(lavaSearch2)
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:lava’:

    vars

lavaSearch2 version 1.5.3
> 
> ## * settings
> seqN <- c(10)
> n.boot <- 0# 1e3
> n.rep <- 5e2
> 
> 
> ## * model
> 
> ## ** generative model
> m.generative <- lvm(w1[mu1:sigma] ~ 1*eta,
+                     w3[mu3:sigma] ~ 1*eta,
+                     w4[mu4:sigma] ~ 1*eta,
+                     w5[mu5:sigma] ~ grp + 1*eta,
+                     w6[mu6:sigma] ~ grp + 1*eta,
+                     w7[mu7:sigma] ~ grp + 1*eta,
+                     eta ~ 0, u ~ 1)
> latent(m.generative) <- ~eta+u
> transform(m.generative,grp~u) <- function(x){
+   n <- NROW(x)
+   return(c(rep(1,n/2),rep(0,n/2)))
+ }
>  
> ## plot(m)
> 
> generative.coef <- c("mu1" = -1.20756,
+                      "mu3" = -0.328751,
+                      "mu4" = 0.253379,
+                      "mu5" = 0.246786,
+                      "mu6" = 0.006236,
+                      "mu7" = 0.413567,
+                      "w5~grp" = 0,
+                      "w6~grp" = 0,
+                      "w7~grp" = 0,
+                      "sigma" = 0.148296,
+                      "eta~~eta" = 0.348873)
> 
> ## ** fit model
> m.fit <- lvm(w1[mu1:sigma] ~ 1*eta,
+              w3[mu3:sigma] ~ 1*eta,
+              w4[mu4:sigma] ~ 1*eta,
+              w5[mu5:sigma] ~ grp + 1*eta,
+              w6[mu6:sigma] ~ grp + 1*eta,
+              w7[mu7:sigma] ~ grp + 1*eta,
+              eta ~ 0)
> latent(m.fit) <- ~eta      
> ## lava::estimate(m.fit, lava::sim(m.generative, n = 1e5, p = generative.coef))
> ## vcov(lava::estimate(m.fit, lava::sim(m.generative, n = 10, p = generative.coef)))
> 
> ## ** true value of the coefficients
> if(FALSE){ ## create true.coef
+ 
+     ## perform analysis under the null
+     dtL.vitamin <- fread(file.path(path.data, "vitamin.txt"), header = TRUE)
+ 
+     dtL.vitamin[, animal := as.factor(animal)]
+     dtL.vitamin[, grp := factor(grp, levels = 1:2, labels = c("C","T"))]
+     dtL.vitamin[, week.factor := paste0("w",as.factor(week))]
+     dtL.vitamin[, weight0 := scale(weight)]
+ 
+     dtW.vitamin <- dcast(dtL.vitamin, value.var = "weight0",
+                          formula = grp + animal ~ week.factor)
+     
+     m0.vitamin <- lvm(w1[mu1:sigma] ~ 1*eta,
+                       w3[mu3:sigma] ~ 1*eta,
+                       w4[mu4:sigma] ~ 1*eta,
+                       w5[mu5:sigma] ~ grp + 1*eta,
+                       w6[mu6:sigma] ~ grp + 1*eta,
+                       w7[mu7:sigma] ~ grp + 1*eta,
+                       eta ~ 0)
+     latent(m0.vitamin) <- ~eta
+ 
+     vitamin0.ML <- estimate(m0.vitamin, data = dtW0.vitamin)
+ 
+     ## extract coef and display
+     true.coef <- round(coef(vitamin0.ML), 6)
+     true.coef[grep("grpT",names(true.coef))] <- 0 ## under the null
+     Mtrue.coef <- cbind(names(true.coef)," = ",as.double(true.coef),",")
+     Mtrue.coef[1,1] <- paste0("c(",Mtrue.coef[1,1])
+     Mtrue.coef[NROW(Mtrue.coef),4] <- ")"
+     Mtrue.coef <- cbind(apply(Mtrue.coef, 1, paste, collapse = ""))
+     print(as.data.table(Mtrue.coef), quote = FALSE, row.names = FALSE)
+ 
+ }
> true.coef <- c("w1" = -1.20756,
+                "w3" = -0.328751,
+                "w4" = 0.253379,
+                "w5" = 0.246786,
+                "w6" = 0.006236,
+                "w7" = 0.413567,
+                "w5~grp" = 0,
+                "w6~grp" = 0,
+                "w7~grp" = 0,
+                "w1~~w1" = 0.148296,
+                "eta~~eta" = 0.348873)
> 
> ## * simulation
> ## n.rep <- 10
> out <- calibrateType1(m.fit, true.coef = true.coef,
+                       param = c("w5~grp","w6~grp","w7~grp"), F.test = TRUE,
+                       n = seqN, n.rep = n.rep,
+                       generative.object = m.generative, generative.coef = generative.coef,
+                       dir.save = path.res, label.file = iter_sim,
+                       bootstrap = FALSE, seed = NULL, trace = 2)
  Check true coefficients - done 
  Settings: 
  > simulation for n=10
  > model: 
Latent Variable Model
                                 
  w1 ~ eta       gaussian        
  eta ~ 1        gaussian, latent
  w3 ~ eta       gaussian        
  w4 ~ eta       gaussian        
  w5 ~ eta+grp   gaussian        
  w6 ~ eta+grp   gaussian        
  w7 ~ eta+grp   gaussian        

Exogenous variables:                     
  grp        gaussian

  > expected coefficients: 
       w1        w3        w4        w5        w6        w7    w5~grp    w6~grp 
-1.207560 -0.328751  0.253379  0.246786  0.006236  0.413567  0.000000  0.000000 
   w7~grp    w1~~w1  eta~~eta 
 0.000000  0.148296  0.348873 
  > null hypotheses: 
w5~grp w6~grp w7~grp 
     0      0      0 

 Perform simulation: 
  > export results in  ./Results/illustration-mixedModel 
Loading required namespace: pbapply
  > sample size=10
There were 50 or more warnings (use warnings() to see the first 50)
> 
> ## out$p.value
> 
> ## * display
> print(sessionInfo())
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: openSUSE 13.1 (Bottle) (x86_64)

Matrix products: default
BLAS: /usr/local/R-3.5.2/lib/libRblas.so
LAPACK: /usr/local/R-3.5.2/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] lavaSearch2_1.5.3 ggplot2_3.1.0     data.table_1.12.0 lava_1.6.5       

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0       pillar_1.3.1     compiler_3.5.2   plyr_1.8.4      
 [5] bindr_0.1.1      tools_3.5.2      tibble_2.0.1     gtable_0.2.0    
 [9] lattice_0.20-38  pkgconfig_2.0.2  rlang_0.3.1      Matrix_1.2-14   
[13] parallel_3.5.2   mvtnorm_1.0-10   bindrcpp_0.2.2   stringr_1.3.1   
[17] withr_2.1.2      dplyr_0.7.5      grid_3.5.2       tidyselect_0.2.4
[21] glue_1.2.0       R6_2.3.0         pbapply_1.3-4    survival_2.42-6 
[25] multcomp_1.4-10  TH.data_1.0-10   purrr_0.2.5      reshape2_1.4.3  
[29] magrittr_1.5     scales_1.0.0     codetools_0.2-15 splines_3.5.2   
[33] MASS_7.3-50      assertthat_0.2.0 colorspace_1.4-0 sandwich_2.5-0  
[37] stringi_1.2.2    lazyeval_0.2.1   munsell_0.5.0    crayon_1.3.4    
[41] zoo_1.8-4       
> summary(out)
Estimated type 1 error rate [95% confidence interval] 
  > sample size: 10 | number of simulations: 499
   link statistic correction type1error                  CI
 global      Wald       Gaus    0.09218  [0.06975 ; 0.1209]
                        Satt    0.08216  [0.06107 ; 0.1097]
                         SSC    0.05010 [0.03407 ; 0.07309]
                  SSC + Satt    0.04208  [0.0276 ; 0.06368]
 w5~grp      Wald       Gaus    0.07214  [0.05248 ; 0.0984]
                        Satt    0.07014 [0.05078 ; 0.09613]
                         SSC    0.04609  [0.03082 ; 0.0684]
                  SSC + Satt    0.04008    [0.026 ; 0.0613]
 w6~grp      Wald       Gaus    0.07615  [0.0559 ; 0.10294]
                        Satt    0.07214  [0.05248 ; 0.0984]
                         SSC    0.05010 [0.03407 ; 0.07309]
                  SSC + Satt    0.04810 [0.03244 ; 0.07075]
 w7~grp      Wald       Gaus    0.07615  [0.0559 ; 0.10294]
                        Satt    0.07214  [0.05248 ; 0.0984]
                         SSC    0.04609  [0.03082 ; 0.0684]
                  SSC + Satt    0.04208  [0.0276 ; 0.06368]

Corrections: Gaus = Gaussian approximation 
             SSC  = small sample correction 
             Satt = Satterthwaite approximation 
> 
> 
> proc.time()
    user   system  elapsed 
 756.150   12.647 1315.072 
